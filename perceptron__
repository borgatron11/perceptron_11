import math
import matplotlib.pyplot as plt
import numpy as np


input_ = 3
hidden_ = 10
output_ = 1

weight1= np.random.rand(input_,hidden_)
weight2= np.random.rand(hidden_,output_)

inputs= np.array([
                    [0,0,1],
                    [0,1,1],
                    [1,1,1],
                    [0,0,0],
                    [0,0,0],
                    [0,1,0]
])

outputs= np.array([
                    [1],
                    [1],
                    [1],
                    [0],
                    [0],
                    [1]
])

def sig(x):
    return 1/(1 + math.e**(-x))



def error(predicted,out):
    return np.sum((predicted - out)**2)/len(out)


def forward_pass(x):
    layer1= np.dot(x,weight1)
    layer1= sig(layer1)

    layer2= np.dot(layer1,weight2)
    layer2= sig(layer2)
    return error(layer2, outputs), layer2



def back_prop(x, y, w1, w2, alpha):
    # hidden layer
    z1 = x.dot(w1)  # input from layer 1
    a1 = sig(z1)  # output of layer 2

    # Output layer
    z2 = a1.dot(w2)  # input of out layer
    a2 = sig(z2)  # output of out layer
    # error in output layer
    d2 = (a2 - y)
    d1 = np.multiply((w2.dot((d2.transpose()))).transpose(),(np.multiply(a1, 1 - a1)))

    # Gradient for w1 and w2
    w1_adj = x.transpose().dot(d1)
    w2_adj = a1.transpose().dot(d2)

    # Updating parameters
    w1 = w1 - (alpha * (w1_adj))
    w2 = w2 - (alpha * (w2_adj))

    return (w1, w2)


error_history= []
out1_history= []

epoch= 20000


for i in range(epoch):
    forward_pass(inputs)
    weight1, weight2= back_prop(inputs, outputs, weight1, weight2, 1 )
    error_= forward_pass(inputs)
    error_history.append(error_[0])
    out1_history.append(forward_pass(inputs)[1][0])
    if i % 10000 == 0:
        print(error_[0])



input_2= np.array([1, 1, 0])


print(forward_pass(input_2)[1])

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

user_input= np.array([num1, num2, num3])

print(forward_pass(user_input)[1])

plt.subplot(211)
plt.title('Error History')
plt.plot(error_history)
plt.subplot(212)
plt.title('Output Calculation')
plt.plot(out1_history)


plt.show()



